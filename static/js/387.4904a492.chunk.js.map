{"version":3,"file":"static/js/387.4904a492.chunk.js","mappings":"oQAEaA,GAAaC,EAAAA,EAAAA,GAAO,KAAPA,CAAH,+FAMVC,GAAaD,EAAAA,EAAAA,GAAO,IAAPA,CAAH,gDAIVE,GAAaF,EAAAA,EAAAA,GAAO,IAAPA,CAAH,idAqBVG,GAAkBH,EAAAA,EAAAA,GAAO,KAAPA,CAAH,2F,SC8C5B,EApEgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA4BR,OA1BAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GAERC,KAILG,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJ,GAAIA,EAAKC,QAAQC,OAAS,EAGxB,OAFAZ,EAAW,WACXI,GAAa,GAGfJ,EAAWU,EAAKC,SAChBP,GAAa,EACd,IACAS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,KAEZG,EAAAA,EAAAA,IAAgBZ,GACbI,MAAK,SAAAC,GACJR,EAAcQ,EAAKQ,MACpB,IACAL,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,IACb,GAAE,CAACT,KAGF,gCACGN,GACC,wBACGA,EAAQoB,KAAI,SAAAC,GACX,OACE,2BACE,SAAC3B,EAAD,UAAa2B,EAAOC,SACnBD,EAAOE,QAAQV,OAAS,KACvB,iCACE,SAACjB,EAAD,UAAayB,EAAOE,QAAQC,MAAM,EAAG,QACrC,SAAC3B,EAAD,CACE4B,KAAMJ,EAAOK,IACbC,OAAO,SACPC,IAAI,sBAHN,SAIC,kBAKH,SAAChC,EAAD,UAAayB,EAAOE,YAdfF,EAAOQ,GAkBnB,OAGH,UAAC/B,EAAD,WAAiB,yCACuBI,EAAW,OAGpDE,IAAa,SAAC0B,EAAA,EAAD,MAGnB,C,kMC3EKC,EAAW,gCACXC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,qCAErBC,GAHuB,cACnBO,EADmB,OAKnB5B,EAAO4B,EAAS5B,KALG,kBAMlBA,GANkB,2CAAH,qDASXO,EAAe,mCAAG,WAAMZ,GAAN,yFACNgC,EAAAA,EAAAA,IAAA,UAAaP,EAAb,iBAA8BzB,GAAW0B,GADnC,cACvBO,EADuB,OAEvB5B,EAAO4B,EAAS5B,KAFO,kBAGtBA,GAHsB,2CAAH,sDAMf6B,EAAY,mCAAG,WAAMlC,GAAN,yFACHgC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACDzB,EADC,YAErB0B,GAHwB,cACpBO,EADoB,OAKpB5B,EAAO4B,EAAS5B,KALI,kBAMnBA,GANmB,2CAAH,sDASZF,EAAe,mCAAG,WAAMH,GAAN,yFACNgC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACDzB,EADC,YAErB0B,GAH2B,cACvBO,EADuB,OAKvB5B,EAAO4B,EAAS5B,KALO,kBAMtBA,GANsB,2CAAH,sDASf8B,EAAe,mCAAG,WAAMC,GAAN,yFACNJ,EAAAA,EAAAA,IAAA,UAClBP,EADkB,8BACYW,EADZ,WAErBV,GAH2B,cACvBO,EADuB,OAKvB5B,EAAO4B,EAAS5B,KALO,kBAMtBA,GANsB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/fetchAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const AuthorName = styled('h4')`\n  font-size: 20px;\n  margin-bottom: 8px;\n  //   text-align: center;\n`;\n\nexport const ReviewText = styled('p')`\n  margin-bottom: 16px;\n`;\n\nexport const ReviewLink = styled('a')`\ndisplay: block;\nwidth: 110px;\n  border: 2px solid #31d0aa;\n  background-color: #ffffff;\n  border-radius: 10px;\n  padding: 8px 16px;\n  color: #111111;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 600;\n  margin-bottom: 16px;\n  transition: \n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #ffffff;\n    background-color: #31d0aa;\n`;\n\nexport const ReviewsNotFound = styled('h4')`\n  margin-bottom: 16px;\n  font-size: 20px;\n  text-align: center;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews, getMovieDetails } from 'services/fetchAPI';\nimport {\n  AuthorName,\n  ReviewText,\n  ReviewLink,\n  ReviewsNotFound,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [movieTitle, setMovieTitle] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (!movieId) {\n      return;\n    }\n\n    getMovieReviews(movieId)\n      .then(data => {\n        if (data.results.length < 1) {\n          setReviews(null);\n          setIsLoading(false);\n          return;\n        }\n        setReviews(data.results);\n        setIsLoading(false);\n      })\n      .catch(err => console.error(err));\n\n    getMovieDetails(movieId)\n      .then(data => {\n        setMovieTitle(data.title);\n      })\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews ? (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <li key={review.id}>\n                <AuthorName>{review.author}</AuthorName>\n                {review.content.length > 1000 ? (\n                  <>\n                    <ReviewText>{review.content.slice(0, 1000)}</ReviewText>\n                    <ReviewLink\n                      href={review.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Read more\n                    </ReviewLink>\n                  </>\n                ) : (\n                  <ReviewText>{review.content}</ReviewText>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <ReviewsNotFound>\n          We don't have any reviews for movie \"{movieTitle}\"\n        </ReviewsNotFound>\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiMTZlYWZhMmEzOTE3ZDU3ZGQzMGRhOTZhOWQxOTg5MCIsInN1YiI6IjY0ODgzZjcyZTI3MjYwMDBjOTMyMjM2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.XdPSLtTSAZv4fw0M0gYehYEL9mjnuAiltEwvVoL-DaE',\n  },\n};\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?language=en-US`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, options);\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMoviesByName = async queryName => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?query=${queryName}&page=1`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\n// search movie by name\n// fetch(\n//   'https://api.themoviedb.org/3/search/movie?query={name}&page=1',\n//   options\n// )\n//   .then(response => response.json())\n//   .then(response => console.log(response))\n//   .catch(err => console.error(err));\n\n// get details by movie Id\n//api.themoviedb.org/3/movie/{movie_id}\n\n// get cast by movie id\n//api.themoviedb.org/3/movie/{movie_id}/credits\n\n// get reviews by movie Id\n//api.themoviedb.org/3/movie/{movie_id}/reviews\n"],"names":["AuthorName","styled","ReviewText","ReviewLink","ReviewsNotFound","useState","reviews","setReviews","movieTitle","setMovieTitle","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieReviews","then","data","results","length","catch","err","console","error","getMovieDetails","title","map","review","author","content","slice","href","url","target","rel","id","Loader","BASE_URL","options","method","headers","accept","Authorization","getTrending","axios","response","getMovieCast","getMoviesByName","queryName"],"sourceRoot":""}