{"version":3,"file":"static/js/387.08e6c773.chunk.js","mappings":"sQAEaA,GAAaC,EAAAA,EAAAA,GAAO,KAAPA,CAAH,+NAWVC,GAAaD,EAAAA,EAAAA,GAAO,KAAPA,CAAH,4CAIVE,GAAaF,EAAAA,EAAAA,GAAO,IAAPA,CAAH,+DAKVG,GAAaH,EAAAA,EAAAA,GAAO,IAAPA,CAAH,kdAoBVI,GAAkBJ,EAAAA,EAAAA,GAAO,KAAPA,CAAH,2G,SC+B5B,EA7DgB,WACd,OAA8BK,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GAERC,IAILG,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJ,GAAIA,EAAKC,QAAQC,OAAS,EAGxB,OAFAV,EAAW,WACXE,GAAa,GAGfF,EAAWQ,EAAKC,SAChBP,GAAa,EACd,IACAS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,GACb,GAAE,CAACT,KAGF,gCACGJ,GACC,wBACGA,EAAQgB,KAAI,SAAAC,GACX,OACE,UAACxB,EAAD,YACE,SAACE,EAAD,UAAasB,EAAOC,SACnBD,EAAOE,QAAQR,OAAS,KACvB,iCACE,SAACf,EAAD,UAAaqB,EAAOE,QAAQC,MAAM,EAAG,QACrC,SAACvB,EAAD,CACEwB,KAAMJ,EAAOK,IACbC,OAAO,SACPC,IAAI,sBAHN,SAIC,kBAKH,SAAC5B,EAAD,UAAaqB,EAAOE,YAdPF,EAAOQ,GAkB3B,OAGH,SAAC3B,EAAD,UAAiB,6CAIlBI,IAAa,SAACwB,EAAA,EAAD,MAGnB,C,kMCrEKC,EAAW,gCACXC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,qCAErBC,GAHuB,cACnBO,EADmB,OAKnB1B,EAAO0B,EAAS1B,KALG,kBAMlBA,GANkB,2CAAH,qDASX2B,EAAe,mCAAG,WAAMhC,GAAN,yFACN8B,EAAAA,EAAAA,IAAA,UAAaP,EAAb,iBAA8BvB,GAAWwB,GADnC,cACvBO,EADuB,OAEvB1B,EAAO0B,EAAS1B,KAFO,kBAGtBA,GAHsB,2CAAH,sDAMf4B,EAAY,mCAAG,WAAMjC,GAAN,yFACH8B,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACDvB,EADC,YAErBwB,GAHwB,cACpBO,EADoB,OAKpB1B,EAAO0B,EAAS1B,KALI,kBAMnBA,GANmB,2CAAH,sDASZF,EAAe,mCAAG,WAAMH,GAAN,yFACN8B,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACDvB,EADC,YAErBwB,GAH2B,cACvBO,EADuB,OAKvB1B,EAAO0B,EAAS1B,KALO,kBAMtBA,GANsB,2CAAH,sDASf6B,EAAe,mCAAG,WAAMC,GAAN,yFACNL,EAAAA,EAAAA,IAAA,UAClBP,EADkB,8BACYY,EADZ,WAErBX,GAH2B,cACvBO,EADuB,OAKvB1B,EAAO0B,EAAS1B,KALO,kBAMtBA,GANsB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/fetchAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewItem = styled('li')`\n  border: 2px solid #5fc3e4;\n  border-radius: 12px;\n  padding: 12px 24px;\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  background: rgba(95, 195, 228, 0.2);\n`;\n\nexport const AuthorName = styled('h4')`\n  font-size: 24px;\n`;\n\nexport const ReviewText = styled('p')`\n  font-size: 20px;\n  color: #293b4c;\n`;\n\nexport const ReviewLink = styled('a')`\ndisplay: block;\nwidth: 130px;\n  border: 2px solid #5fc3e4;\n  border-radius: 12px;\n  padding: 8px 16px;\n  color: #293b4c;\n  text-transform: uppercase;\n  font-size: 16px;\n  font-weight: 600;\n  transition: \n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n     box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1),\n     border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #5fc3e4;\n    box-shadow: 0px 0px 18px 5px #5fc3e4;\n`;\n\nexport const ReviewsNotFound = styled('h4')`\n  font-size: 24px;\n  text-align: center;\n  font-weight: 400;\n  color: #293b4c;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from 'services/fetchAPI';\nimport {\n  AuthorName,\n  ReviewText,\n  ReviewLink,\n  ReviewsNotFound,\n  ReviewItem,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (!movieId) {\n      return;\n    }\n\n    getMovieReviews(movieId)\n      .then(data => {\n        if (data.results.length < 1) {\n          setReviews(null);\n          setIsLoading(false);\n          return;\n        }\n        setReviews(data.results);\n        setIsLoading(false);\n      })\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews ? (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <ReviewItem key={review.id}>\n                <AuthorName>{review.author}</AuthorName>\n                {review.content.length > 1000 ? (\n                  <>\n                    <ReviewText>{review.content.slice(0, 1000)}</ReviewText>\n                    <ReviewLink\n                      href={review.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Read more\n                    </ReviewLink>\n                  </>\n                ) : (\n                  <ReviewText>{review.content}</ReviewText>\n                )}\n              </ReviewItem>\n            );\n          })}\n        </ul>\n      ) : (\n        <ReviewsNotFound>\n          We don't have any reviews for this movie\n        </ReviewsNotFound>\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiMTZlYWZhMmEzOTE3ZDU3ZGQzMGRhOTZhOWQxOTg5MCIsInN1YiI6IjY0ODgzZjcyZTI3MjYwMDBjOTMyMjM2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.XdPSLtTSAZv4fw0M0gYehYEL9mjnuAiltEwvVoL-DaE',\n  },\n};\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?language=en-US`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, options);\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMoviesByName = async queryName => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?query=${queryName}&page=1`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\n// search movie by name\n// fetch(\n//   'https://api.themoviedb.org/3/search/movie?query={name}&page=1',\n//   options\n// )\n//   .then(response => response.json())\n//   .then(response => console.log(response))\n//   .catch(err => console.error(err));\n\n// get details by movie Id\n//api.themoviedb.org/3/movie/{movie_id}\n\n// get cast by movie id\n//api.themoviedb.org/3/movie/{movie_id}/credits\n\n// get reviews by movie Id\n//api.themoviedb.org/3/movie/{movie_id}/reviews\n"],"names":["ReviewItem","styled","AuthorName","ReviewText","ReviewLink","ReviewsNotFound","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieReviews","then","data","results","length","catch","err","console","error","map","review","author","content","slice","href","url","target","rel","id","Loader","BASE_URL","options","method","headers","accept","Authorization","getTrending","axios","response","getMovieDetails","getMovieCast","getMoviesByName","queryName"],"sourceRoot":""}