{"version":3,"file":"static/js/600.89ef9ce0.chunk.js","mappings":"qUAEaA,GAAWC,EAAAA,EAAAA,GAAO,KAAPA,CAAH,wGAORC,GAAWD,EAAAA,EAAAA,GAAO,KAAPA,CAAH,gPAYRE,GAAYF,EAAAA,EAAAA,GAAO,KAAPA,CAAH,+DAITG,GAAiBH,EAAAA,EAAAA,GAAO,IAAPA,CAAH,kFAMdI,GAAsBJ,EAAAA,EAAAA,GAAO,OAAPA,CAAH,6CAInBK,GAAeL,EAAAA,EAAAA,GAAO,KAAPA,CAAH,2GAOZM,GAAUN,EAAAA,EAAAA,GAAO,MAAPA,CAAH,gD,SCmCpB,EA9Da,WACX,OAAwBO,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GAERC,IAILG,EAAAA,EAAAA,IAAaH,GACVI,MAAK,SAAAC,GACJ,GAAIA,EAAKT,KAAKU,OAAS,EAGrB,OAFAT,EAAQ,WACRE,GAAa,GAGfF,EAAQQ,EAAKT,MACbG,GAAa,EACd,IACAQ,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,GACb,GAAE,CAACR,KAGF,gCACGJ,GACC,SAACT,EAAD,UACGS,EAAKe,KAAI,SAAAC,GACR,OACE,UAACvB,EAAD,WACGuB,EAAMC,cACL,SAACnB,EAAD,CACEoB,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,iBAGb,SAACtB,EAAD,CACEoB,IAAKG,EACLF,IAAKH,EAAMI,iBAGf,SAAC1B,EAAD,UAAYsB,EAAMI,iBAClB,UAACzB,EAAD,YACE,SAACC,EAAD,UAAqB,eACpBoB,EAAMM,eAfIN,EAAMO,QAmBxB,OAGH,SAAC1B,EAAD,UAAc,2DAIfK,IAAa,SAACsB,EAAA,EAAD,MAGnB,C,kMCzEKC,EAAW,gCACXC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,qCAErBC,GAHuB,cACnBO,EADmB,OAKnBxB,EAAOwB,EAASxB,KALG,kBAMlBA,GANkB,2CAAH,qDASXyB,EAAe,mCAAG,WAAM9B,GAAN,yFACN4B,EAAAA,EAAAA,IAAA,UAAaP,EAAb,iBAA8BrB,GAAWsB,GADnC,cACvBO,EADuB,OAEvBxB,EAAOwB,EAASxB,KAFO,kBAGtBA,GAHsB,2CAAH,sDAMfF,EAAY,mCAAG,WAAMH,GAAN,yFACH4B,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACDrB,EADC,YAErBsB,GAHwB,cACpBO,EADoB,OAKpBxB,EAAOwB,EAASxB,KALI,kBAMnBA,GANmB,2CAAH,sDASZ0B,EAAe,mCAAG,WAAM/B,GAAN,yFACN4B,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACDrB,EADC,YAErBsB,GAH2B,cACvBO,EADuB,OAKvBxB,EAAOwB,EAASxB,KALO,kBAMtBA,GANsB,2CAAH,sDASf2B,EAAe,mCAAG,WAAMC,GAAN,yFACNL,EAAAA,EAAAA,IAAA,UAClBP,EADkB,8BACYY,EADZ,WAErBX,GAH2B,cACvBO,EADuB,OAKvBxB,EAAOwB,EAASxB,KALO,kBAMtBA,GANsB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/fetchAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled('ul')`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const CastItem = styled('li')`\n  display: flex;\n  gap: 4px;\n  flex-direction: column;\n  width: 200px;\n  padding-bottom: 8px;\n  text-align: center;\n  border: 2px solid #5fc3e4;\n  border-radius: 12px;\n  background: rgba(95, 195, 228, 0.2);\n`;\n\nexport const ActorName = styled('h4')`\n  font-size: 20px;\n  padding: 0 4px;\n`;\nexport const ActorCharacter = styled('p')`\n  font-size: 16px;\n  padding: 0 4px;\n  color: #293b4c;\n`;\n\nexport const ActorCharacterTitle = styled('span')`\n  font-weight: 600;\n`;\n\nexport const CastNotFound = styled('h4')`\n  font-size: 24px;\n  text-align: center;\n  font-weight: 400;\n  color: #293b4c;\n`;\n\nexport const CastImg = styled('img')`\n  border-radius: 12px;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCast } from 'services/fetchAPI';\nimport defaultActor from 'images/defaultActor.png';\nimport {\n  CastList,\n  CastItem,\n  ActorName,\n  ActorCharacter,\n  ActorCharacterTitle,\n  CastNotFound,\n  CastImg,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (!movieId) {\n      return;\n    }\n\n    getMovieCast(movieId)\n      .then(data => {\n        if (data.cast.length < 1) {\n          setCast(null);\n          setIsLoading(false);\n          return;\n        }\n        setCast(data.cast);\n        setIsLoading(false);\n      })\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  return (\n    <>\n      {cast ? (\n        <CastList>\n          {cast.map(actor => {\n            return (\n              <CastItem key={actor.cast_id}>\n                {actor.profile_path ? (\n                  <CastImg\n                    src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                    alt={actor.original_name}\n                  ></CastImg>\n                ) : (\n                  <CastImg\n                    src={defaultActor}\n                    alt={actor.original_name}\n                  ></CastImg>\n                )}\n                <ActorName>{actor.original_name}</ActorName>\n                <ActorCharacter>\n                  <ActorCharacterTitle>Character:</ActorCharacterTitle>\n                  {actor.character}\n                </ActorCharacter>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      ) : (\n        <CastNotFound>\n          We don't have any information about cast of this movie\n        </CastNotFound>\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiMTZlYWZhMmEzOTE3ZDU3ZGQzMGRhOTZhOWQxOTg5MCIsInN1YiI6IjY0ODgzZjcyZTI3MjYwMDBjOTMyMjM2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.XdPSLtTSAZv4fw0M0gYehYEL9mjnuAiltEwvVoL-DaE',\n  },\n};\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?language=en-US`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, options);\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\nexport const getMoviesByName = async queryName => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?query=${queryName}&page=1`,\n    options\n  );\n  const data = response.data;\n  return data;\n};\n\n// search movie by name\n// fetch(\n//   'https://api.themoviedb.org/3/search/movie?query={name}&page=1',\n//   options\n// )\n//   .then(response => response.json())\n//   .then(response => console.log(response))\n//   .catch(err => console.error(err));\n\n// get details by movie Id\n//api.themoviedb.org/3/movie/{movie_id}\n\n// get cast by movie id\n//api.themoviedb.org/3/movie/{movie_id}/credits\n\n// get reviews by movie Id\n//api.themoviedb.org/3/movie/{movie_id}/reviews\n"],"names":["CastList","styled","CastItem","ActorName","ActorCharacter","ActorCharacterTitle","CastNotFound","CastImg","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieCast","then","data","length","catch","err","console","error","map","actor","profile_path","src","alt","original_name","defaultActor","character","cast_id","Loader","BASE_URL","options","method","headers","accept","Authorization","getTrending","axios","response","getMovieDetails","getMovieReviews","getMoviesByName","queryName"],"sourceRoot":""}